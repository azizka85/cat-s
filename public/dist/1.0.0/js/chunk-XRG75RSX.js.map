{
  "version": 3,
  "sources": ["../../../../node_modules/@azizka/i18n/src/utils.js", "../../../../node_modules/@azizka/i18n/src/translator.js", "../../../../node_modules/@azizka/i18n/index.js", "../../../../node_modules/@azizka/router/src/utils.js", "../../../../node_modules/@azizka/router/src/router.js", "../../../../node_modules/@azizka/router/src/route-navigator.js", "../../../../node_modules/@azizka/router/src/mocks/location-mock.js", "../../../../node_modules/@azizka/router/src/mocks/history-mock.js", "../../../../node_modules/@azizka/router/index.js", "../../../../src/globals.ts", "../../../../src/client/globals.ts", "../../../../src/client/helpers.ts"],
  "sourcesContent": ["function isObject(obj) {\r\n  const type = typeof obj;\r\n\r\n  return type === 'function' ||\r\n    (type === 'object' && !!obj);\r\n}\r\n\r\nmodule.exports = {\r\n  isObject\r\n};\r\n", "const { isObject } = require('./utils');\r\n\r\nclass Translator {\r\n  data;\r\n  globalContext;\r\n\r\n  extension;\r\n\r\n  constructor() {\r\n    this.resetContext();\r\n  }\r\n\r\n  static create(data) {\r\n    const translator = new Translator();\r\n\r\n    translator.add(data);\r\n\r\n    return translator;\r\n  }\r\n\r\n  translate(text, defaultNumOrFormatting, numOrFormattingOrContext, formattingOrContext) {\r\n    let num = undefined;\r\n    let formatting = undefined;\r\n    let context = this.globalContext;\r\n\r\n    if(isObject(defaultNumOrFormatting)) {\r\n      formatting = defaultNumOrFormatting;\r\n\r\n      if(isObject(numOrFormattingOrContext)) {\r\n        context = numOrFormattingOrContext;\r\n      }\r\n    } else if(typeof defaultNumOrFormatting === 'number') {\r\n      num = defaultNumOrFormatting;\r\n      formatting = numOrFormattingOrContext;\r\n\r\n      if(formattingOrContext) {\r\n        context = formattingOrContext;\r\n      }\r\n    } else {\r\n      if(typeof numOrFormattingOrContext === 'number') {\r\n        num = numOrFormattingOrContext;\r\n        formatting = formattingOrContext;\r\n      } else {\r\n        formatting = numOrFormattingOrContext;\r\n        \r\n        if(formattingOrContext) {\r\n          context = formattingOrContext;\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.translateText(text, num, formatting, context);\r\n  }\r\n\r\n  add(data) {\r\n    if(!this.data) {\r\n      this.data = data;\r\n    } else {\r\n      if(data.values && this.data.values) {\r\n        for(const key of Object.keys(data.values)) {\r\n          this.data.values[key] = data.values[key];\r\n        }\r\n      }\r\n  \r\n      if(data.contexts && this.data.contexts) {\r\n        for(const context of data.contexts) {\r\n          this.data.contexts.push(context);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  setContext(key, value) {\r\n    his.globalContext[key] = value;\r\n  }\r\n\r\n  extend(extension) {\r\n    this.extension = extension;\r\n  }\r\n\r\n  clearContext(key) {\r\n    delete this.globalContext[key];\r\n  }\r\n\r\n  reset() {\r\n    this.resetData();\r\n    this.resetContext();\r\n  }\r\n\r\n  resetData() {\r\n    this.data = {\r\n      values: {},\r\n      contexts: []\r\n    };\r\n  }\r\n\r\n  resetContext() {\r\n    this.globalContext = {};\r\n  }\r\n\r\n  translateText(text, num, formatting, context) {\r\n    context = context || this.globalContext;\r\n\r\n    if(!this.data) {\r\n      return this.useOriginalText('' + text, num, formatting);\r\n    }\r\n\r\n    const contextData = this.getContextData(this.data, context);\r\n\r\n    let result = null;\r\n\r\n    if(contextData) {\r\n      result = this.findTranslation(text, num, formatting, contextData?.values);\r\n    }\r\n\r\n    if(result === null) {\r\n      result = this.findTranslation(text, num, formatting, this.data.values);\r\n    } \r\n\r\n    if(result === null)  {\r\n      result = this.useOriginalText('' + text, num, formatting);\r\n    }\r\n\r\n    return result;  \r\n  }\r\n\r\n  findTranslation(text, num, formatting, data) {\r\n    let value = data?.[text];\r\n\r\n    if(value === undefined) {\r\n      return null;\r\n    }\r\n\r\n    if(typeof value === 'object' && !Array.isArray(value)) {\r\n      if(this.extension) {\r\n        value = '' + this.extension(text, num, formatting, value);\r\n        value = this.applyNumbers(value, num || 0);\r\n\r\n        return this.applyFormatting(value, formatting);\r\n      } else {\r\n        return this.useOriginalText('' + text, num, formatting);\r\n      }\r\n    }  \r\n\r\n    if(num === undefined && typeof value === 'string') {\r\n      return this.applyFormatting(value, formatting);\r\n    } else if(value instanceof Array) {               \r\n      for(const triple of value) {\r\n        if(\r\n          num === undefined && triple[0] === null && triple[1] === null || \r\n          num !== undefined && (\r\n            triple[0] !== null && num >= triple[0] && (triple[1] === null || num <= triple[1]) || \r\n            triple[0] === null && triple[1] && num <= triple[1]\r\n          )\r\n        ) {\r\n          const numVal = num || 0;\r\n          const textVal = '' + (triple[2] ?? '');          \r\n\r\n          const result = this.applyNumbers(textVal, numVal);\r\n\r\n          return this.applyFormatting(result, formatting);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  applyNumbers(str, num) {\r\n    str = str.replace('-%n', '' + -num);\r\n    str = str.replace('%n', '' + num);\r\n\r\n    return str;\r\n  }\r\n\r\n  applyFormatting(text, formatting) {\r\n    if(formatting) {\r\n      for(const key of Object.keys(formatting)) {\r\n        const regex = new RegExp(`%{${key}}`, 'g');\r\n        text = text.replace(regex, formatting[key]);\r\n      }\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  getContextData(data, context) {\r\n    if(!data.contexts) {\r\n      return null;\r\n    }\r\n\r\n    for(const ctx of data.contexts) {\r\n      let equal = true;\r\n\r\n      for(const key of Object.keys(ctx.matches)) {\r\n        const value = ctx.matches[key];\r\n\r\n        equal = equal && value === context[key];\r\n\r\n        if(!equal) break;\r\n      }\r\n\r\n      if(equal) {\r\n        return ctx;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  useOriginalText(text, num, formatting) {\r\n    if(num === undefined) {\r\n      return this.applyFormatting(text, formatting);\r\n    }\r\n\r\n    return this.applyFormatting(text.replace('%n', '' + num), formatting);\r\n  }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  Translator\r\n};\r\n", "const { Translator } = require('./src/translator');\r\n\r\nconst { isObject } = require('./src/utils');\r\n\r\nmodule.exports = {\r\n  Translator,\r\n  isObject\r\n};\r\n", "function trimSlashes(path) {\n  return path.replace(/\\/$/, '').replace(/^\\//, '');\n}\n\nfunction transformURL(url, currentPath, root) {\n  const newUrl = url.trim();\n  const splits = newUrl.split('?');\n\n  let path = splits[0].trim();\n  const query = splits[1]?.trim();\n\n  if(!path) {\n    path = currentPath;\n  } else {\n    if(root !== '/') {\n      path = path.replace(root, '');\n    }\n\n    path = trimSlashes(path);\n  }\n\n  if(!query) {\n    return path;\n  }\n\n  return `${path}?${query}`;\n}\n\nfunction parseQuery(query) {\n  const data = {};\n\n  let search = query;\n\n  if(query[0] === '?') {\n    search = query.substring(1);\n  }\n\n  search.split('&').forEach(row => {\n    const parts = row.split('=');\n\n    if(parts[0] !== '') {\n      const key = decodeURIComponent(parts[0]);\n      const value = parts[1] === undefined ? '1' : parts[1];\n\n      data[key] = value;\n    }\n  });\n\n  return data;    \n}\n\nfunction parseRouteRule(route) {\n  if(typeof route === 'string') {\n    const uri = trimSlashes(route);\n\n    const rule = uri\n      .replace(/([\\\\\\/\\-\\_\\.])/g, '\\\\$1')\n      .replace(/\\{[a-zA-Z]+\\}/g, '(:any)')\n      .replace(/\\:any/g, '[\\\\w\\\\-\\\\_\\\\.]+')\n      .replace(/\\:word/g, '[a-zA-Z]+')\n      .replace(/\\:num/g, '\\\\d+');\n\n    return new RegExp(`^${rule}$`, 'i');\n  }\n\n  return route;\n}\n\nmodule.exports = {\n  trimSlashes,\n  transformURL,\n  parseQuery,\n  parseRouteRule\n};\n", "const { trimSlashes, parseRouteRule } = require('./utils');\n\nclass Router {\n  routes = [];\n  root = '/';\n  before;\n  page404;\n\n  constructor(options) {\n    this.before = options?.before;\n    this.page404 = options?.page404;\n\n    if(options?.root) {\n      this.root = options.root === '/' ? '/' : `/${trimSlashes(options.root)}/`;\n    }\n\n    if(options?.routes) {\n      this.addRoutes(options.routes);\n    }\n  }\n\n  get rootPath() {\n    return this.root;\n  }\n\n  addRoutes(routes) {\n    for(const route of routes) {\n      this.add(route.rule, route.handler, route.options);\n    }\n  }\n\n  add(rule, handler, options) {\n    this.routes.push({\n      rule: parseRouteRule(rule),\n      handler,\n      options\n    });\n\n    return this;\n  }\n\n  remove(param) {\n    this.routes.some((route, i) => {\n      if(route.handler === param || route.rule === parseRouteRule(param)) {\n        this.routes.splice(i, 1);\n\n        return true;\n      }\n\n      return false;\n    });\n    \n    return this;\n  } \n\n  findRoute(currentPath) {    \n    for(const route of this.routes) {\n      const match = currentPath.match(route.rule);\n\n      if(match) {\n        return {\n          match,\n          route\n        };\n      }\n    }\n  }\n\n  async processUrl(currentPath, currentQuery, state) {\n    const doBreak = await this.before?.({\n      fragment: currentPath,\n      query: currentQuery,\n      state\n    });\n\n    if(!doBreak) {\n      const found = this.findRoute(currentPath);\n\n      if(!found) {\n        await this.page404?.({\n          fragment: currentPath,\n          query: currentQuery,\n          state\n        });\n      } else {\n        found.match.shift();\n\n        const page = {\n          fragment: currentPath,\n          query: currentQuery,\n          match: found.match,\n          options: found.route.options,\n          state\n        };\n\n        await found.route.handler?.(page);\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  Router\n};\n", "const { transformURL, trimSlashes, parseQuery } = require('./utils');\n\nclass RouteNavigator {\n  router;\n  popStateHandler;\n\n  constructor(router) {\n    this.router = router;\n\n    this.popStateHandler = () => {\n      router.processUrl(this.fragment, this.query, history.state);\n    };\n  }\n\n  get fragment() {\n    let value = decodeURI(location.pathname);\n  \n    if(this.router.rootPath !== '/') {\n      value = value.replace(this.router.rootPath, '');\n    }\n  \n    return trimSlashes(value);\n  }\n\n  get query() {\n    return parseQuery(location.search);\n  }\n\n  async redirectTo(url, state) {\n    const newUrl = transformURL(url, this.fragment, this.router.rootPath);  \n\n    history.replaceState(state, '', this.router.rootPath + newUrl);\n\n    const currentPath = this.fragment;\n    const currentQuery = this.query;\n    \n    await this.router.processUrl(currentPath, currentQuery, state);\n  }\n\n  async navigateTo(url, state) {\n    const newUrl = transformURL(url, this.fragment, this.router.rootPath);  \n    \n    history.pushState(state, '', this.router.rootPath + newUrl);\n\n    const currentPath = this.fragment;\n    const currentQuery = this.query;\n    \n    await this.router.processUrl(currentPath, currentQuery, state);\n  }\n\n  refresh() {\n    return this.redirectTo(this.fragment + location.search, history.state);\n  } \n\n  addUriListener() {\n    window.addEventListener('popstate', this.popStateHandler);\n  }\n\n  removeUriListener() {\n    window.removeEventListener('popstate', this.popStateHandler);\n  }\n}\n\nmodule.exports = {\n  RouteNavigator\n};\n", "class LocationMock {\n  pathname = '';\n  search = '';\n}\n\nmodule.exports = {\n  LocationMock\n};\n", "class HistoryMock {\n  location;\n\n  constructor(location) { \n    this.location = location;\n  }\n\n  replaceState(state, data, path) {\n    this.changeLocation(path);\n  }\n\n  pushState(state, data, path) {\n    this.changeLocation(path);\n  }\n\n  changeLocation(path) {\n    let splits = path?.split?.('?');\n\n    if(splits) {\n      this.location.pathname = splits[0];\n\n      if(splits.length > 1) {\n        this.location.search = '?' + splits[1];\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  HistoryMock\n};\n", "const { Router } = require('./src/router');\n\nconst { RouteNavigator } = require('./src/route-navigator');\n\nconst { trimSlashes, transformURL, parseQuery, parseRouteRule } = require('./src/utils');\n\nconst { LocationMock } = require('./src/mocks/location-mock');\nconst { HistoryMock } = require('./src/mocks/history-mock');\n\nmodule.exports = {\n  Router,\n\n  RouteNavigator,\n\n  trimSlashes,\n  transformURL,\n  parseQuery,\n  parseRouteRule,\n\n  LocationMock,\n  HistoryMock\n};\n", "export const PAGE_ROOT = '/';\r\n\r\nexport const LANGUAGES = {\r\n  kz: { \r\n    image: '/images/flags/kz.svg',\r\n    label: '\u049A\u0430\u0437\u0430\u049B\u0448\u0430'\r\n  },\r\n  ru: { \r\n    image: '/images/flags/ru.svg',\r\n    label: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439'\r\n  },\r\n  en: { \r\n    image: '/images/flags/en.svg',\r\n    label: 'English'\r\n  }\r\n};\r\n\r\nexport const DEFAULT_LANGUAGE = 'kz';\r\n", "import { FormattingContext, Translator } from '@azizka/i18n';\r\nimport { Router, RouteNavigator, Page } from '@azizka/router';\r\n\r\nimport { RouteOptions } from './data/route-options';\r\nimport { RouteState } from './data/route-state';\r\n\r\nimport { View } from './views/view';\r\nimport { BaseLayout } from './views/layouts/base-layout';\r\n\r\nimport { PAGE_ROOT } from '../globals';\r\n\r\nexport const router = new Router<RouteOptions, RouteState>({ root: PAGE_ROOT });\r\nexport const routeNavigator = new RouteNavigator<RouteOptions, RouteState>(router);\r\n\r\nexport const views: {\r\n  [key: string]: View\r\n} = {};\r\n\r\nexport const layouts: {\r\n  [key: string]: BaseLayout & View\r\n} = {};\r\n\r\nexport const languages: {\r\n  [key: string]: Translator\r\n} = {};\r\n\r\nexport interface GlobalContext {\r\n  tr: (\r\n    text: string | number, \r\n    defaultNumOrFormatting?: number | FormattingContext, \r\n    numOrFormattingOrContext?: number | FormattingContext,\r\n    formattingOrContext?: FormattingContext    \r\n  ) => string;\r\n}\r\n\r\nconst translator = new Translator();\r\n\r\nexport const context: GlobalContext = {   \r\n  tr: translator.translate.bind(translator)\r\n};\r\n", "import { routeNavigator, layouts as globalLayouts } from \"./globals\";\r\n\r\nexport async function sleep(ms?: number) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport async function navigateHandler(event: Event, elem: HTMLElement) {\r\n  event.preventDefault();\r\n\r\n  const path = elem.getAttribute?.('href');\r\n\r\n  if(path) {\r\n    await routeNavigator.navigateTo(path);\r\n  }\r\n}\r\n\r\nexport async function loadContent(\r\n  parent: HTMLElement | null, \r\n  firstTime: boolean, \r\n  layouts: string[]\r\n): Promise<HTMLElement> {\r\n  let content: HTMLElement;\r\n\r\n  if(firstTime || parent) {\r\n    content = parent || document.body;\r\n  } else {\r\n    let path = location.pathname + '?ajax=1&init=1&time=' + Date.now();\r\n\r\n    const layoutsToLoad = [];\r\n\r\n    for(let layout of layouts) {\r\n      if(!(layout in globalLayouts)) {\r\n        layoutsToLoad.push(layout);\r\n      }\r\n    }\r\n\r\n    if(layoutsToLoad.length > 0) {\r\n      path += '&layouts=' + layoutsToLoad.join(',');\r\n    }\r\n\r\n    const html = await (await fetch(path)).text();\r\n    \r\n    content = document.createElement('div');\r\n\r\n    content.innerHTML = html;\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\nexport async function mount(elem: HTMLElement | null) {\r\n  if(elem) {\r\n    await sleep(10);\r\n\r\n    elem.classList.remove('page-unmount');\r\n  }\r\n}\r\n\r\nexport async function unmount(elem: HTMLElement | null) {\r\n  if(elem) {\r\n    elem.classList.add('page-unmount');\r\n\r\n    await sleep(250);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
