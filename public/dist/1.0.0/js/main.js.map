{
  "version": 3,
  "sources": ["../../../../node_modules/@azizka/promise-queue/src/promise-queue.js", "../../../../node_modules/@azizka/promise-queue/index.js", "../../../../src/client/main.ts", "../../../../src/client/views/pages/loader-page.ts", "../../../../src/client/helpers/view-helpers.ts", "../../../../src/client/views/layouts/default-layout.ts"],
  "sourcesContent": ["class PromiseQueue {\r\n  queueStarted = false;\r\n  tasks = [];\r\n\r\n  started;\r\n  finished;\r\n  taskFinished;\r\n\r\n  constructor(started, finished, taskFinished) {\r\n    this.started = started;\r\n    this.finished = finished;\r\n    this.taskFinished = taskFinished;\r\n  }\r\n\r\n  async start() {\r\n    if(!this.queueStarted) {\r\n      this.queueStarted = true;\r\n\r\n      this.started?.();\r\n\r\n      let data;\r\n\r\n      while(this.tasks.length > 0) {\r\n        const task = this.tasks.splice(0, 1)[0];\r\n\r\n        data = await task(data);\r\n\r\n        this.taskFinished?.(data);\r\n      }\r\n\r\n      this.queueStarted = false;\r\n\r\n      this.finished?.();\r\n    }\r\n  }\r\n\r\n  addTask(func) {\r\n    this.tasks.push(func);\r\n\r\n    this.start();\r\n  }\r\n\r\n  stop() {\r\n    this.tasks = [];\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  PromiseQueue\r\n};\r\n", "const { PromiseQueue } = require('./src/promise-queue');\r\n\r\nmodule.exports = {\r\n  PromiseQueue\r\n};\r\n", "import { PromiseQueue } from '@azizka/promise-queue';\r\n\r\nimport { TaskData } from './data/task-data';\r\n\r\nimport { LoaderPage } from './views/pages/loader-page';\r\n\r\nimport { loadPage } from './helpers/view-helpers';\r\n\r\nimport { localeRoute } from '../helpers';\r\n\r\nimport { router, routeNavigator } from './globals';\r\nimport { DEFAULT_LANGUAGE } from '../globals';\r\n\r\nconst queue = new PromiseQueue<TaskData>();\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n  let firstTime = true;    \r\n\r\n  LoaderPage.instance.init(null, firstTime);\r\n\r\n  router.addRoutes([{\r\n    rule: `${localeRoute}/?`,\r\n    async handler(page) {\r\n      queue.stop();\r\n\r\n      await loadPage(\r\n        queue,\r\n        page.match?.[0] || DEFAULT_LANGUAGE,\r\n        page, \r\n        'home-page', \r\n        ['main-layout'],\r\n        firstTime\r\n      );\r\n    }\r\n  }, {\r\n    rule: `${localeRoute}/?sign-in`,\r\n    async handler(page) {\r\n      queue.stop();\r\n\r\n      await loadPage(\r\n        queue,\r\n        page.match?.[0] || DEFAULT_LANGUAGE,\r\n        page, \r\n        'sign-in-page', \r\n        [], \r\n        firstTime\r\n      );\r\n    }\r\n  }, {\r\n    rule: `${localeRoute}/?sign-up`,\r\n    async handler(page) {\r\n      queue.stop();\r\n\r\n      await loadPage(\r\n        queue,\r\n        page.match?.[0] || DEFAULT_LANGUAGE,\r\n        page, \r\n        'sign-up-page', \r\n        [], \r\n        firstTime\r\n      );\r\n    }\r\n  }]);\r\n\r\n  routeNavigator.addUriListener();\r\n\r\n  router\r\n    .processUrl(routeNavigator.fragment, routeNavigator.query)\r\n    .catch(\r\n      reason => console.error(reason)      \r\n    )\r\n    .finally(() => firstTime = false);\r\n});\r\n", "import { View } from '../view';\r\n\r\nexport class LoaderPage implements View {\r\n  protected static page: LoaderPage | null = null;\r\n\r\n  protected node: HTMLElement | null = null;\r\n\r\n  static get instance(): LoaderPage {\r\n    if(!LoaderPage.page) {\r\n      LoaderPage.page = new LoaderPage();\r\n    }\r\n\r\n    return LoaderPage.page;\r\n  }\r\n\r\n  get elem(): HTMLElement | null {\r\n    return this.node;\r\n  }\r\n\r\n  async init(parent: HTMLElement | null, firstTime: boolean) {\r\n    let content = parent || document.body;\r\n\r\n    this.node = content.querySelector('[data-page=\"loader-page\"]');\r\n\r\n    return content;\r\n  }\r\n}\r\n", "import { Page } from '@azizka/router';\r\n\r\nimport { Translator } from '@azizka/i18n';\r\n\r\nimport { PromiseQueue } from '@azizka/promise-queue';\r\n\r\nimport { RouteOptions } from '../data/route-options';\r\nimport { RouteState } from '../data/route-state';\r\nimport { TaskData, TaskStatus } from '../data/task-data';\r\n\r\nimport { BaseLayout } from '../views/layouts/base-layout';\r\nimport { DefaultLayout } from '../views/layouts/default-layout';\r\n\r\nimport { LoaderPage } from '../views/pages/loader-page';\r\n\r\nimport { toCamel } from '../../helpers';\r\n\r\nimport { layouts as globalLayouts, context, languages, views } from '../globals';\r\n\r\nexport function hideSplash() {\r\n  const splashElem = document.querySelector('.splash');\r\n\r\n  splashElem?.classList.remove('splash-open');   \r\n}\r\n\r\nexport function getExistingLayout(layouts: string[]) {\r\n  const reverseLayouts = [...layouts].reverse();\r\n\r\n  let layout: BaseLayout = DefaultLayout.instance;\r\n\r\n  for(const layoutName of reverseLayouts) {\r\n    if(!(layoutName in globalLayouts) || layout['content'] !== globalLayouts[layoutName]) {      \r\n      break;\r\n    }\r\n\r\n    layout = globalLayouts[layoutName];\r\n  }\r\n\r\n  return layout;\r\n}\r\n\r\nexport async function initLayouts(layouts: string[], parent: HTMLElement | null, firstTime: boolean) {\r\n  const firstLoad: {\r\n    [key: string]: boolean\r\n  } = {};\r\n\r\n  for(const layout of layouts) {\r\n    if(!(layout in globalLayouts)) {\r\n      const module = await import(`./views/layouts/${layout}.js?time=${Date.now()}`) as any;\r\n\r\n      parent = await module[toCamel(layout)]?.instance?.init?.(parent, firstTime);\r\n\r\n      globalLayouts[layout] = module[toCamel(layout)]?.instance;\r\n\r\n      firstLoad[layout] = true;\r\n    }\r\n  }\r\n\r\n  return firstLoad;\r\n}\r\n\r\nexport async function loadLayouts(\r\n  lang: string,\r\n  page: Page<RouteOptions, RouteState>,\r\n  layouts: string[], \r\n  firstLoad: {\r\n    [key: string]: boolean\r\n  }\r\n) {\r\n  const reverseLayouts = [...layouts].reverse();\r\n\r\n  let parentLayout = DefaultLayout.instance;\r\n  \r\n  for(const layout of reverseLayouts) {\r\n    if(parentLayout['content'] !== globalLayouts[layout]) {\r\n      await parentLayout.replaceContent(globalLayouts[layout]);\r\n    }\r\n\r\n    await globalLayouts[layout].load?.(lang, page, firstLoad[layout] ?? false);\r\n\r\n    parentLayout = globalLayouts[layout];\r\n  } \r\n  \r\n  return parentLayout;\r\n}\r\n\r\nexport function loadPage(\r\n  queue: PromiseQueue<TaskData>,\r\n  lang: string,\r\n  page: Page<RouteOptions, RouteState>, \r\n  name: string, \r\n  layouts: string[], \r\n  firstTime: boolean\r\n) {\r\n  let parent: HTMLElement | null = null;\r\n\r\n  let pageFirstLoad = false;\r\n\r\n  queue.addTask(async () => {\r\n    if(!firstTime && (!(lang in languages) || !(name in views))) {\r\n      const layout = getExistingLayout(layouts);\r\n  \r\n      if(layout['content'] !== LoaderPage.instance) {\r\n        await layout.replaceContent(LoaderPage.instance);\r\n      }\r\n    } \r\n\r\n    return {\r\n      status: TaskStatus.completed\r\n    };\r\n  });\r\n\r\n  queue.addTask(async (data) => {\r\n    if((!data || data.status === TaskStatus.completed) && !(lang in languages)) {\r\n      try {\r\n        const module = await import(`./locales/${lang}.js?time=${Date.now()}`);\r\n  \r\n        languages[lang] = Translator.create(module.default);\r\n\r\n        data = {\r\n          status: TaskStatus.completed          \r\n        };\r\n      } catch(err) {\r\n        data = {\r\n          status: TaskStatus.error,\r\n          data: err\r\n        };\r\n      }\r\n    }\r\n\r\n    return data as TaskData;\r\n  });\r\n\r\n  queue.addTask(async (data) => {\r\n    if((!data || data.status === TaskStatus.completed) && !(name in views)) {       \r\n      try {\r\n        const module = await import(`./views/${name}.js?time=${Date.now()}`) as any;\r\n  \r\n        parent = await module[toCamel(name)]?.instance?.init?.(parent, firstTime);\r\n    \r\n        views[name] = module[toCamel(name)]?.instance;\r\n    \r\n        pageFirstLoad = true;\r\n\r\n        data = {\r\n          status: TaskStatus.completed\r\n        };\r\n      } catch(err) {\r\n        data = {\r\n          status: TaskStatus.error,\r\n          data: err\r\n        };\r\n      }\r\n    }\r\n\r\n    return data as TaskData;\r\n  });\r\n\r\n  let firstLoad: {\r\n    [key: string]: boolean;\r\n  } = {};\r\n\r\n  queue.addTask(async (data) => {\r\n    if(!data || data.status === TaskStatus.completed) {\r\n      try {\r\n        firstLoad = await initLayouts(layouts, parent, firstTime);\r\n\r\n        data = {\r\n          status: TaskStatus.completed\r\n        };\r\n      } catch(err) {\r\n        data = {\r\n          status: TaskStatus.error,\r\n          data: err\r\n        };\r\n      }\r\n    }\r\n\r\n    return data as TaskData;\r\n  });\r\n\r\n  queue.addTask(async (data) => {\r\n    if(!data || data.status === TaskStatus.completed) {\r\n      try {\r\n        context.tr = languages[lang].translate.bind(languages[lang]);\r\n\r\n        document.documentElement.lang = lang;\r\n        document.title = context.tr('Catalog of Services');\r\n        \r\n        const layout = await loadLayouts(lang, page, layouts, firstLoad);    \r\n    \r\n        if(layout['content'] !== views[name]) {\r\n          await layout.replaceContent(views[name]);\r\n        }\r\n    \r\n        await views[name].load?.(lang, page, pageFirstLoad);\r\n\r\n        data = {\r\n          status: TaskStatus.completed\r\n        };\r\n      } catch(err) {\r\n        data = {\r\n          status: TaskStatus.error,\r\n          data: err\r\n        };\r\n      }\r\n    }\r\n\r\n    return data;\r\n  });\r\n\r\n  queue.addTask(async (data) => {\r\n    if(firstTime) {\r\n      hideSplash();\r\n    }\r\n\r\n    if(data?.status === TaskStatus.error) {\r\n      /// TODO: Need to change\r\n      console.error(data.data);      \r\n    }    \r\n  });\r\n}\r\n", "import { BaseLayout } from \"./base-layout\";\r\n\r\nexport class DefaultLayout extends BaseLayout {\r\n  protected static layout: DefaultLayout | null = null;    \r\n\r\n  static get instance(): DefaultLayout {\r\n    if(!DefaultLayout.layout) {\r\n      DefaultLayout.layout = new DefaultLayout();\r\n    }\r\n\r\n    return DefaultLayout.layout;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
